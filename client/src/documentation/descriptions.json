{
  "Datasets": "The dataset to get ratings for. Choose a train/testsplit, matrix, pre-filters...",
  "Recommender Approaches": "The recommender approach to train/test the dataset with. New recommendations will be found for existing items...",
  "Predictor Approaches": "The predictor approach to train/test the dataset with. Existing items will be rated...",
  "Metrics": "A metric is an algorithm which measures the performance/quality of approaches. The metric filter is dependent on the datasets chosen...",
  "BiasedMF": "Biased matrix factorization trained with alternating least squares.",
  "ImplicitMF": "Implicit matrix factorization trained with alternating least squares.",
  "AlternatingLeastSquares": "A Recommendation Model based off the algorithms described in the paper ‘Collaborative Filtering for Implicit Feedback Datasets’ with performance optimizations described in ‘Applications of the Conjugate Gradient Method for Implicit Feedback Collaborative Filtering.",
  "BayesianPersonalizedRanking": "A recommender model that learns a matrix factorization embedding based off minimizing the pairwise ranking loss described in the paper BPR: Bayesian Personalized Ranking from Implicit Feedback.",
  "LogisticMatrixFactorization": "A collaborative filtering recommender model that learns probabilistic distribution whether user like it or not. Algorithm of the model is described in Logistic Matrix Factorization for Implicit Feedback Data.",
  "BaselineOnlyALS": "Algorithm predicting the baseline estimate for given user and item.",
  "BaselineOnlySGD": "Algorithm predicting the baseline estimate for given user and item.",
  "SVD": "The famous SVD algorithm, as popularized by Simon Funk during the Netflix Prize. When baselines are not used, this is equivalent to Probabilistic Matrix Factorization [salakhutdinov2008a]",
  "SVDpp": "The SVD++ algorithm, an extension of SVD taking into account implicit ratings.",
  "NMF": "A collaborative filtering algorithm based on Non-negative Matrix Factorization. This algorithm is very similar to SVD.",
  "NormalPredictor": "Algorithm predicting a random rating based on the distribution of the training set, which is assumed to be normal.",
  "ItemItem": "Item-item nearest-neighbor collaborative filtering with ratings. This implementation is based on the description of item-based CF by Deshpande and Karypis [DK04]",
  "UserUser": "User-user nearest-neighbor collaborative filtering with ratings. ",
  "KNNBasic": "A basic collaborative filtering algorithm.",
  "KNNBaselineALS": "A basic collaborative filtering algorithm taking into account a baseline rating.",
  "KNNBaselineSGD": "A basic collaborative filtering algorithm taking into account a baseline rating.",
  "KNNWithMeans": "A basic collaborative filtering algorithm, taking into account the mean ratings of each user.",
  "KNNWithZScore": "A basic collaborative filtering algorithm, taking into account the z-score normalization of each user.",
  "CoClustering": "A collaborative filtering algorithm based on co-clustering. This is a straightforward implementation of [George:2005].",
  "SlopeOne": "A simple yet accurate collaborative filtering algorithm. This is a straightforward implementation of the SlopeOne algorithm [lemire2007a].",
  "PopScore": "Score items by their popularity. ",
  "Random": "A random-item recommender.",
  "HR@K": "Compute whether or not a list is a hit; any list with at least one relevant item in the first positions is scored as 1, and lists with no relevant items as 0. ",
  "NDCG@K": "Compute the normalized discounted cumulative gain [JarvelinKekalainen02]",
  "P@K": "Compute recommendation precision. In the uncommon case that k is specified and len(recs) < k, this metric uses len(recs) as the denominator.",
  "R@K": "Compute recommendation recall. ",
  "MRR": "Compute the reciprocal rank [KV97] of the first relevant item in a list of recommendations. Deshpande and Karypis [DK04] call this the 'reciprocal hit rate'.",
  "RMSE": "Compute RMSE (root mean squared error). ",
  "MAE": "Compute MAE (mean absolute error).",
  "MAPE": "Calculate the mean absolute percentage error (MAPE) for a ground-truth prediction vector pair.",
  "MSE": "Calculate the mean squared error (MSE) for a ground-truth prediction vector pair.",
  "ItemCoverage": "Calculates the coverage value for items in possible user-item pairs given the collection of recommendations. Recommendations over users/items not in possible users-items are discarded",
  "UserCoverage": "Calculates the coverage value for users in possible user-item pairs given the collection of recommendations. Recommendations over users/items not in possible users-items are discarded",
  "Subgroups": "Set the subgroup (combination of filter passes with filters) for the dataset.",
  "Matrix Subset": "Filter passes for the subgroup. Filter passes are combined (union), e.g. Male and Neutral show both Male and Neutral genders.",
  "Filter Pass Filter": "Filters for the filter pass. Filters are applied after each other, i.e. the second filter filters the first filter."
}
